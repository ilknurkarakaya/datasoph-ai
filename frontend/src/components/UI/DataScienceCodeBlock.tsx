import React, { useState } from 'react';
import CodeBlock from './CodeBlock.tsx';
import { Play, BookOpen, Save, Database, BarChart3, Microscope, Cog } from 'lucide-react';

interface DatasetInfo {
  name: string;
  rows: number;
  columns: number;
  size?: string;
}

interface DataScienceCodeBlockProps {
  code: string;
  language: string;
  title?: string;
  fileName?: string;
  executable?: boolean;
  showLineNumbers?: boolean;
  className?: string;
  datasetInfo?: DatasetInfo;
  analysisType?: 'eda' | 'modeling' | 'visualization' | 'statistics' | 'preprocessing' | 'feature-engineering';
  complexity?: 'beginner' | 'intermediate' | 'advanced';
  estimatedRuntime?: string;
  memoryUsage?: string;
}

const DataScienceCodeBlock: React.FC<DataScienceCodeBlockProps> = ({ 
  datasetInfo, 
  analysisType,
  complexity = 'intermediate',
  estimatedRuntime,
  memoryUsage,
  ...codeBlockProps 
}) => {
  const [isAnalysisExpanded, setIsAnalysisExpanded] = useState(false);

  const getAnalysisIcon = (type: string) => {
    const icons: Record<string, JSX.Element> = {
      eda: <Microscope className="w-4 h-4" />,
      modeling: <Cog className="w-4 h-4" />,
      visualization: <BarChart3 className="w-4 h-4" />,
      statistics: <BarChart3 className="w-4 h-4" />,
      preprocessing: <Database className="w-4 h-4" />,
      'feature-engineering': <Cog className="w-4 h-4" />
    };
    return icons[type] || <Microscope className="w-4 h-4" />;
  };

  const getAnalysisDisplayName = (type: string): string => {
    const names: Record<string, string> = {
      eda: 'Exploratory Data Analysis',
      modeling: 'Machine Learning Modeling',
      visualization: 'Data Visualization',
      statistics: 'Statistical Analysis',
      preprocessing: 'Data Preprocessing',
      'feature-engineering': 'Feature Engineering'
    };
    return names[type] || 'Data Analysis';
  };

  const getComplexityColor = (level: string): string => {
    const colors: Record<string, string> = {
      beginner: 'text-green-600 bg-green-50 border-green-200',
      intermediate: 'text-blue-600 bg-blue-50 border-blue-200',
      advanced: 'text-red-600 bg-red-50 border-red-200'
    };
    return colors[level] || colors.intermediate;
  };

  const handleRunAnalysis = () => {
    console.log('Running analysis:', {
      analysisType,
      datasetInfo,
      code: codeBlockProps.code
    });
    // TODO: Implement actual analysis execution
  };

  const handleAddToNotebook = () => {
    console.log('Adding to notebook:', codeBlockProps.code);
    // TODO: Implement notebook integration
  };

  const handleSaveAsScript = () => {
    const scriptContent = `# ${getAnalysisDisplayName(analysisType || 'analysis')}
# Generated by Datasoph
${datasetInfo ? `# Dataset: ${datasetInfo.name} (${datasetInfo.rows} rows, ${datasetInfo.columns} columns)` : ''}
${estimatedRuntime ? `# Estimated runtime: ${estimatedRuntime}` : ''}
${memoryUsage ? `# Memory usage: ${memoryUsage}` : ''}

${codeBlockProps.code}`;

    const blob = new Blob([scriptContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `datasoph_${analysisType || 'analysis'}_script.py`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className={`bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950/20 dark:to-indigo-950/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800 my-4 ${codeBlockProps.className || ''}`}>
      {/* Analysis context header */}
      {analysisType && (
        <div className="mb-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="flex items-center gap-2 text-blue-700 dark:text-blue-300">
                {getAnalysisIcon(analysisType)}
                <span className="font-medium">{getAnalysisDisplayName(analysisType)}</span>
              </div>
              
              <div className={`px-2 py-1 text-xs rounded-full border ${getComplexityColor(complexity)} dark:bg-opacity-20`}>
                {complexity.charAt(0).toUpperCase() + complexity.slice(1)}
              </div>
            </div>
            
            <button
              onClick={() => setIsAnalysisExpanded(!isAnalysisExpanded)}
              className="text-xs text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200 transition-colors"
            >
              {isAnalysisExpanded ? 'Hide Details' : 'Show Details'}
            </button>
          </div>

          {/* Dataset and performance info */}
          <div className="flex flex-wrap items-center gap-4 mt-2 text-sm text-blue-600 dark:text-blue-400">
            {datasetInfo && (
              <div className="flex items-center gap-1">
                <Database className="w-3 h-3" />
                <span>{datasetInfo.name}</span>
                <span className="text-blue-500 dark:text-blue-500">
                  ({datasetInfo.rows.toLocaleString()} rows, {datasetInfo.columns} cols)
                </span>
                {datasetInfo.size && (
                  <span className="text-blue-500 dark:text-blue-500">‚Ä¢ {datasetInfo.size}</span>
                )}
              </div>
            )}
            
            {estimatedRuntime && (
              <div className="flex items-center gap-1">
                <span>‚è±Ô∏è {estimatedRuntime}</span>
              </div>
            )}
            
            {memoryUsage && (
              <div className="flex items-center gap-1">
                <span>üíæ {memoryUsage}</span>
              </div>
            )}
          </div>

          {/* Expanded analysis details */}
          {isAnalysisExpanded && (
            <div className="mt-3 p-3 bg-white dark:bg-gray-800/50 rounded-lg border border-blue-100 dark:border-blue-700/50">
              <div className="text-sm text-gray-700 dark:text-gray-300 space-y-2">
                <div>
                  <strong>Analysis Type:</strong> {getAnalysisDisplayName(analysisType)}
                </div>
                <div>
                  <strong>Complexity Level:</strong> {complexity.charAt(0).toUpperCase() + complexity.slice(1)}
                </div>
                {datasetInfo && (
                  <div>
                    <strong>Dataset Details:</strong> {datasetInfo.name} with {datasetInfo.rows.toLocaleString()} observations and {datasetInfo.columns} variables
                  </div>
                )}
                {estimatedRuntime && (
                  <div>
                    <strong>Estimated Runtime:</strong> {estimatedRuntime}
                  </div>
                )}
                {memoryUsage && (
                  <div>
                    <strong>Memory Requirements:</strong> {memoryUsage}
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      )}
      
      {/* Enhanced code block */}
      <CodeBlock {...codeBlockProps} />
      
      {/* Data science specific actions */}
      <div className="flex flex-wrap gap-2 mt-3">
        <button 
          onClick={handleRunAnalysis}
          className="flex items-center gap-1 px-3 py-1 text-xs bg-blue-500 hover:bg-blue-600 text-white rounded transition-colors"
                        title="Execute analysis with Datasoph"
        >
          <Play className="w-3 h-3" />
          üöÄ Run Analysis
        </button>
        
        <button 
          onClick={handleAddToNotebook}
          className="flex items-center gap-1 px-3 py-1 text-xs bg-green-500 hover:bg-green-600 text-white rounded transition-colors"
          title="Add to Jupyter notebook"
        >
          <BookOpen className="w-3 h-3" />
          üìã Add to Notebook
        </button>
        
        <button 
          onClick={handleSaveAsScript}
          className="flex items-center gap-1 px-3 py-1 text-xs bg-orange-500 hover:bg-orange-600 text-white rounded transition-colors"
          title="Save as Python script with metadata"
        >
          <Save className="w-3 h-3" />
          üíæ Save as Script
        </button>
      </div>
    </div>
  );
};

export default DataScienceCodeBlock; 